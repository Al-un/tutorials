{"version":3,"sources":["logo.svg","Navigation.js","components/Home.js","components/Plop.js","components/PlopRoot.js","components/NotFound.js","components/SubPage.js","components/Redirecter.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navigation","react_default","a","createElement","style","display","NavLink","to","activeClassName","React","Component","Home","props","Plop","value","match","params","PlopRoot","NotFound","SubPage1","SubPage2","SubPageById","id","SubPage","Switch","Route","path","component","Redirecter","_this","this","setTimeout","console","log","history","push","Main","exact","render","App","className","src","logo","alt","Navigation_Navigation","Main_Main","Boolean","window","location","hostname","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4da50af5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default class Navigation extends React.Component {\r\n  render() {\r\n    return (\r\n      <nav style={{ display: 'flex' }}>\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/\" activeClassName=\"active-link\">\r\n              Home\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/plop\" activeClassName=\"active-link\">\r\n              Plop\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/plop/this is a value\" activeClassName=\"active-link\">\r\n              Plop with spaced value\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/sub/\" activeClassName=\"active-link\">\r\n              Sub page\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/sub/1\" activeClassName=\"active-link\">\r\n              Sub page1\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/redirect\" activeClassName=\"active-link\">\r\n              Redirect\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Home(props) {\r\n  return (\r\n    <div>\r\n      <h2>Home</h2>\r\n      <div>This is a home page</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Plop(props) {\r\n  return (\r\n    <div>\r\n      <h2>Plop</h2>\r\n      <div>\r\n        This is a plop page for value: {props.value || props.match.params.value}\r\n        .\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function PlopRoot(props) {\r\n  return (\r\n    <div>\r\n      <h2>Plop</h2>\r\n      <div>This is a plop root page so no value is provided.</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function NotFound(props) {\r\n  return (\r\n    <div>\r\n      <h2>404</h2>\r\n      <div>Requested content is not found</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Switch, Route, NavLink } from 'react-router-dom';\r\n\r\nfunction SubPage1(props) {\r\n  return (\r\n    <div>\r\n      <h4>SubPage1</h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SubPage2(props) {\r\n  return (\r\n    <div>\r\n      <h4>SubPage2</h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SubPageById(props) {\r\n  return (\r\n    <div>\r\n      <h4>SubPage by Id</h4>\r\n      <p>ID: {props.match.params.id}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default class SubPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Sub pages</h2>\r\n        <p>Testing nested router</p>\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/sub/1\" activeClassName=\"active-link\">\r\n              SubPage1\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/sub/2\" activeClassName=\"active-link\">\r\n              SubPage2\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/sub/test\" activeClassName=\"active-link\">\r\n              SubPage by id: test\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n        <Switch>\r\n          <Route path=\"/sub/1\" component={SubPage1} />\r\n          <Route path=\"/sub/2\" component={SubPage2} />\r\n          <Route path=\"/sub/:id\" component={SubPageById} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Redirecter extends React.Component {\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      console.log('Redirecting to /plop');\r\n      this.props.history.push('/plop');\r\n    }, 5000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Redirection page</h2>\r\n        <p>You will be redirect to \"/plop\" in 5 seconds.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from './components/Home';\r\nimport Plop from './components/Plop';\r\nimport PlopRoot from './components/PlopRoot';\r\nimport NotFound from './components/NotFound';\r\nimport SubPage from './components/SubPage';\r\nimport Redirecter from './components/Redirecter';\r\n\r\nexport default class Main extends React.Component {\r\n  render() {\r\n    return (\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/plop\" component={PlopRoot} />\r\n          <Route path=\"/plop/:value\" component={Plop} />\r\n          <Route\r\n            path=\"/plop-val\"\r\n            render={() => <Plop value=\"arbitrary value\" />}\r\n          />\r\n          <Route path=\"/sub\" component={SubPage} />\r\n          <Route path=\"/redirect\" component={Redirecter} />\r\n          <Route component={NotFound} />\r\n        </Switch>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navigation from './Navigation';\nimport Main from './Main';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-icon\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </div>\n          <div className=\"App-nav\">\n            <Navigation />\n          </div>\n        </header>\n        <div className=\"App-content\">\n          <Main />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}