{"version":3,"sources":["utils/react_logo.svg","person/Person.js","person/PersonList.js","utils/Loading.js","utils/Loader.js","person/PersonContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Person","react_default","a","createElement","className","src","this","props","person","picture","large","alt","FullName","Title","BirthDate","dob","age","phone","name","first","last","Date","date","toDateString","index","concat","title","Component","PersonList","persons","length","error","map","Person_Person","key","login","uuid","Loading","logo","value","defaultProps","PersonContainer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onScroll","window","innerHeight","scrollY","document","body","offsetHeight","state","loading","setState","loadAdditionalPersons","status","undefined","addEventListener","removeEventListener","_this2","console","log","toISOString","fetch","then","results","json","data","scrollTo","catch","loaderMessage","ListWithLoading","isLoading","Loading_Loading","React","App","PersonContainer_PersonContainer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ef1667e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react_logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport './Person.css';\r\n\r\nexport default class Person extends Component {\r\n  get FullName() {\r\n    return this.props.person.name.first + ' ' + this.props.person.name.last;\r\n  }\r\n\r\n  get BirthDate() {\r\n    return new Date(this.props.person.dob.date).toDateString();\r\n  }\r\n\r\n  get Title() {\r\n    return this.props.index\r\n      ? `${this.props.person.name.title} #${this.props.index}`\r\n      : this.props.person.name.title;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Person\">\r\n        <div className=\"Person-picture-container\">\r\n          <img\r\n            className=\"Person-picture\"\r\n            src={this.props.person.picture.large}\r\n            alt={this.FullName}\r\n          />\r\n        </div>\r\n        <div className=\"Person-info\">\r\n          <div className=\"Person-info-entry\">\r\n            <div className=\"Person-info-subject\">Title</div>\r\n            <div className=\"Person-info-value\">{this.Title}</div>\r\n          </div>\r\n          <div className=\"Person-info-entry\">\r\n            <div className=\"Person-info-subject\">Name</div>\r\n            <div className=\"Person-info-value\">{this.FullName}</div>\r\n          </div>\r\n          <div className=\"Person-info-entry\">\r\n            <div className=\"Person-info-subject\">Birth date</div>\r\n            <div className=\"Person-info-value\">\r\n              {this.BirthDate} ({this.props.person.dob.age})\r\n            </div>\r\n          </div>\r\n          <div className=\"Person-info-entry\">\r\n            <div className=\"Person-info-subject\">Phone</div>\r\n            <div className=\"Person-info-value\">{this.props.person.phone}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './PersonList.css';\r\nimport Person from './Person';\r\n\r\nexport default class PersonList extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Total persons count: {this.props.persons.length}.</p>\r\n        {this.props.error}\r\n        {this.props.persons.map((person, index) => (\r\n          <Person person={person} key={person.login.uuid} index={index} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport logo from './react_logo.svg';\r\nimport './Loading.css';\r\n\r\nexport default class Loading extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Loading\">\r\n        <img src={logo} className=\"Loading-logo\" alt=\"loading\" />\r\n        <span>{this.props.value}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLoading.defaultProps = {\r\n  value: 'Loading'\r\n};\r\n","import React from 'react';\r\nimport Loading from './Loading';\r\n\r\n/**\r\n * HOC for loading\r\n *\r\n * @param {*} Component Wrapped component\r\n * @param {*} loaderMessage dynamic or static loading message to display below\r\n * loading icon\r\n */\r\nexport const WithLoading = (Component, loaderMessage) => props => {\r\n  return !props.isLoading ? (\r\n    <Component {...props} />\r\n  ) : (\r\n    <Loading value={loaderMessage} />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport PersonList from './PersonList';\r\nimport { WithLoading } from '../utils/Loader';\r\n\r\nexport default class PersonContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      persons: [],\r\n      status: undefined,\r\n      // loader stuff\r\n      loading: false\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Loading on component mounting\r\n   */\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.onScroll, false);\r\n    this.loadAdditionalPersons();\r\n  }\r\n\r\n  /**\r\n   * Destroying component\r\n   */\r\n  componentWillMount() {\r\n    window.removeEventListener('scroll', this.onScroll, false);\r\n  }\r\n\r\n  onScroll = () => {\r\n    if (\r\n      window.innerHeight + window.scrollY >= document.body.offsetHeight - 500 &&\r\n      this.state.persons.length &&\r\n      !this.state.loading\r\n    ) {\r\n      // console.log(`Loading infinite scroll at scrollY: ${window.scrollY}`);\r\n      this.setState({ scrollY: window.scrollY });\r\n      this.loadAdditionalPersons();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Fetch additional random persons 10 by 10\r\n   */\r\n  loadAdditionalPersons() {\r\n    console.log(`${new Date().toISOString()}: Fetching persons data start`);\r\n    this.setState({ status: 'Fetching data', loading: true });\r\n    fetch('https://randomuser.me/api?results=20')\r\n      .then(results => {\r\n        this.setState({ status: 'Parsing data' });\r\n        return results.json();\r\n      })\r\n      .then(data => {\r\n        this.setState({\r\n          persons: this.state.persons.concat(data.results)\r\n        });\r\n        console.log(\r\n          `${new Date().toISOString()}: Fetching persons data completed`\r\n        );\r\n        this.setState({ status: 'Parsing completed', loading: false });\r\n        return this.state.scrollY;\r\n      })\r\n      .then(scrollY => {\r\n        console.log(`Loading scrollY: ${scrollY}`);\r\n        if (scrollY) {\r\n          window.scrollTo(0, scrollY);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        this.setState({ error: error });\r\n        console.log(\r\n          `${new Date().toISOString()}: Fetching persons data error: ${error}`\r\n        );\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const ListWithLoading = WithLoading(PersonList, this.state.status);\r\n    return (\r\n      <ListWithLoading\r\n        isLoading={this.state.loading}\r\n        persons={this.state.persons}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport PersonContainer from './person/PersonContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <PersonContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}